#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on: 
  push:
    branches: 
      - master
    schedule:
      - cron: 0 20 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-20.04

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir
          df -h
      
      - name: add plugin
        run: |
         cd package
         mkdir openwrt-packages
         cd openwrt-packages
         git clone https://github.com/xiaorouji/openwrt-passwall.git
         git clone https://github.com/vernesong/OpenClash/tree/master/luci-app-openclash
      
      - name: Update feeds
        run: |
          echo 'src-git helloworld https://github.com/fw876/helloworld' >> ./feeds.conf.default
          sed -i 's/\"#src-git\"/\"src-git\"/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config
          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:
          # 编译x64固件:
          cat >> .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          EOF
          # 固件压缩, 编译ext4格式固件
          # 注意如果选的插件数目多，CONFIG_TARGET_ROOTFS_PARTSIZE要设置大一些
          cat >> .config <<EOF
          CONFIG_TARGET_ROOTFS_EXT4FS=y
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_TARGET_ROOTFS_PARTSIZE=800
          EOF
          # 编译UEFI固件:
          # cat >> .config <<EOF
          # CONFIG_EFI_IMAGES=y
          # EOF
          # IPv6支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          # CONFIG_PACKAGE_ipv6helper=y
          # EOF
          # 多文件系统支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-fs-nfs=y
          CONFIG_PACKAGE_kmod-fs-nfs-common=y
          CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          CONFIG_PACKAGE_kmod-fs-ntfs=y
          CONFIG_PACKAGE_kmod-fs-squashfs=y
          EOF
          # USB3.0支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-usb-ohci=y
          CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          CONFIG_PACKAGE_kmod-usb2=y
          CONFIG_PACKAGE_kmod-usb2-pci=y
          CONFIG_PACKAGE_kmod-usb3=y
          EOF
          # 常用LuCI插件选择, 主要定制passwall与ssr-plus
          cat >> .config <<EOF
          # 广告屏蔽大师Plus +
          CONFIG_PACKAGE_luci-app-adbyby-plus=y
          # Aria2下载工具
          # CONFIG_PACKAGE_luci-app-aria2=y
          # 百度网盘管理
          # CONFIG_PACKAGE_luci-app-baidupcs-web=y
          # Docker容器
          # CONFIG_PACKAGE_luci-app-dockerman=y
          # FRPC内网穿透
          # CONFIG_PACKAGE_luci-app-frpc=y
          # 可道云
          # CONFIG_PACKAGE_luci-app-kodexplorer=y
          # 完全兼容DLNA / UPnP-AV客户端的服务器软件
          # CONFIG_PACKAGE_luci-app-minidlna=y
          # openvpn客户端
          # CONFIG_PACKAGE_luci-app-openvpn=y
          # openvpn服务器
          CONFIG_PACKAGE_luci-app-openvpn-server=y
          #openclash科学上网
          CONFIG_PACKAGE_luci-app-openclash=y
          # passwall科学上网
          CONFIG_PACKAGE_luci-app-passwall=y
          #
          # Configuration
          #
          CONFIG_PACKAGE_luci-app-passwall_Iptables_Transparent_Proxy=y
          CONFIG_PACKAGE_luci-app-passwall_Nftables_Transparent_Proxy=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Brook=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Hysteria=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_NaiveProxy=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Server=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Server=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Server=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_GO=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Geodata=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray_Plugin=y
          # end of Configuration
          # qbittorrent下载工具
          # CONFIG_PACKAGE_luci-app-qbittorrent=y
          # ssr plus科学上网
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Simple_obfs=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray_plugin=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun is not set
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray=y
          # 网页终端命令行
          CONFIG_PACKAGE_luci-app-ttyd=y
          # v2ray服务器
          CONFIG_PACKAGE_luci-app-v2ray-server=y
          # 微力同步
          # CONFIG_PACKAGE_luci-app-verysync=y
          # 迅雷雷鸟
          CONFIG_PACKAGE_luci-app-xlnetacc=n
          # 网易云歌曲解锁
          CONFIG_PACKAGE_luci-app-unblockmusic=n
          # Web管理页面设置
          CONFIG_PACKAGE_luci-app-webadmin=y
          # 实时流量监测
          CONFIG_PACKAGE_luci-app-wrtbwmon=y
          # udpxy做组播服务器
          CONFIG_PACKAGE_luci-app-udpxy=y
          # MWAN3负载均衡
          CONFIG_PACKAGE_luci-app-mwan3=y
          # MWAN3分流助手
          CONFIG_PACKAGE_luci-app-mwan3helper=y
          # KMS服务器设置
          CONFIG_PACKAGE_luci-app-vlmcsd=y
          # 动态域名 DNS（集成阿里DDNS客户端）
          CONFIG_PACKAGE_luci-app-ddns=y
          # 添加防火墙
          CONFIG_PACKAGE_luci-app-firewall=y
          # Turbo ACC网络加速
          CONFIG_PACKAGE_luci-app-flowoffload=y
          # 网络带宽监视器
          CONFIG_PACKAGE_luci-app-nlbwmon=y
          # WOL网络唤醒
          CONFIG_PACKAGE_luci-app-wol=y
          # 实时流量监测
          CONFIG_PACKAGE_luci-app-wrtbwmon=y
          # ZeroTier内网穿透
          CONFIG_PACKAGE_luci-app-zerotier=y
          # 支持AirPlay功能
          # CONFIG_PACKAGE_luci-app-shairplay=y
          # 多拨虚拟网卡
          CONFIG_PACKAGE_luci-app-syncdial=y
          # WireGuard状态
          CONFIG_PACKAGE_luci-app-wireguard=y
          EOF
          # LuCI主题:
          cat >> .config <<EOF
          # CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_luci-theme-material=y
          CONFIG_PACKAGE_luci-theme-netgear=y
          EOF
          # 常用软件包:
          cat >> .config <<EOF
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_screen=y
          CONFIG_PACKAGE_tree=y
          CONFIG_PACKAGE_vim-fuller=y
          CONFIG_PACKAGE_wget=y
          EOF
          #
          # ===============================================================
          # 
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true
      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
